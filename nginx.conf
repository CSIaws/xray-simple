worker_processes  1;
error_log logs/error.log info;
events {
  worker_connections 1024;
}
http {
  server {
    resolver 169.254.169.253;
    listen 8080;

    location / {
      set $session_storage redis;
      set $session_redis_prefix sessions;
      set $session_redis_host wise-redis-001.evf36x.0001.apne1.cache.amazonaws.com;
      set $session_redis_port 6379;

      access_by_lua_block {
        local opts = {
          client_id = "application",
          client_secret = "12bdc6b9-d169-4aa8-8dcf-c7e579486b59",
          redirect_uri = "http://ip-172-30-7-146.ap-northeast-1.compute.internal:8080/cb",
          issuer = "http://ip-172-30-13-152.ap-northeast-1.compute.internal:8080/auth/realms/test",
          authorization_endpoint = "http://ip-172-30-13-152.ap-northeast-1.compute.internal:8080/auth/realms/test/protocol/openid-connect/auth",
          token_endpoint = "http://ip-172-30-13-152.ap-northeast-1.compute.internal:8080/auth/realms/test/protocol/openid-connect/token",
          jwks_uri = "http://ip-172-30-13-152.ap-northeast-1.compute.internal:8080/auth/realms/test/protocol/openid-connect/certs",
          end_session_endpoint = "http://ip-172-30-13-152.ap-northeast-1.compute.internal:8080/auth/realms/test/protocol/openid-connect/logout",
          target_url = "/top",
        }

        local res, err, target, session = require("lua/openidc").authenticate(opts)
        session:close()

        if err then
          ngx.log(ngx.ERR, err)
          ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
        end
      }

      proxy_http_version 1.1;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Connection close;
      proxy_set_header X-Forwarded-Proto "https";
      proxy_pass https://echo-api.3scale.net;
    }

    location = /favicon.ico {
      access_log off;
      empty_gif;
      expires 30d;
    }

    location = /post_test.html {
      root /usr/share/nginx/html;
    }
  }
}
